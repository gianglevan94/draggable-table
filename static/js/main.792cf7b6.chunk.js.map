{"version":3,"sources":["components/TableBody.js","components/TableHead.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableBody","getStyle","key","widths","_this","props","width","renderColumn","item","col","colIndex","rowIndex","render","react_default","a","createElement","className","style","onDragEnd","result","reorder","source","index","destination","_this2","this","_this$props","data","schema","draggable","react_beautiful_dnd_esm","droppableId","provided","ref","innerRef","map","draggableId","id","Object","assign","draggableProps","dragHandleProps","PureComponent","defaultProps","MIN_WIDTH","TableHead","columnRefs","calcWidths","setTimeout","setColumnWidth","keys","reduce","objectSpread","defineProperty","getBoundingClientRect","onDragStart","e","dragColumnIndex","onDragEnter","column","targetRect","middle","right","left","hoverClientX","clientX","initStyle","position","cursor","onResizeStart","preventDefault","stopPropagation","isResize","onResize","_this$props2","Math","max","onStopResize","window","addEventListener","removeEventListener","_this$props3","resizeable","el","onDragOver","title","onMouseDown","height","display","top","last","change","percentChange","volume","value","buyVolume","sellVolume","foreignNet","putThoughVol","putThoughValue","toConsumableArray","Array","it","text","Fragment","list","startIndex","endIndex","from","_result$splice","splice","removed","slicedToArray","Table","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","reorderColumn","targetIndex","state","setState","reorderRow","setWidth","hideColumn","hideColumns","concat","showColumn","filter","onCheckBoxChange","target","checked","name","getSchema","_this$state","includes","_this$state2","columnDraggable","rowDraggable","components_TableHead","components_TableBody","type","onChange","htmlFor","App","components_Table","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.792cf7b6.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nclass TableBody extends PureComponent {\r\n  getStyle = (key) => {\r\n    const { widths } = this.props\r\n    if (!widths[key]) {\r\n      return {}\r\n    }\r\n\r\n    return {\r\n      width: widths[key]\r\n    }\r\n  }\r\n\r\n  renderColumn = (item, col, colIndex, rowIndex) => {\r\n    if (col.render && typeof col.render === 'function') {\r\n      return (\r\n        <td className={col.className} style={this.getStyle(col.key)} key={colIndex}>\r\n          {col.render(item[col.key], item, rowIndex)}\r\n        </td>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <td className={col.className} style={this.getStyle(col.key)} key={colIndex}>\r\n        {item[col.key]}\r\n      </td>\r\n    )\r\n  }\r\n\r\n  onDragEnd = (result) => {\r\n    const { reorder } = this.props\r\n    reorder(result.source.index, result.destination.index)\r\n  }\r\n\r\n  render() {\r\n    const { data, schema, draggable } = this.props\r\n    if (!draggable) {\r\n      return (\r\n        <tbody>\r\n          {data.map(item =>\r\n            <tr>\r\n            {schema.map((col, colIndex) => this.renderColumn(item, col, colIndex))}\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      )\r\n    }\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId=\"droppableRow\">\r\n          {(provided) => (\r\n            <tbody ref={provided.innerRef}>\r\n            {data.map((item, rowIndex) => (\r\n              <Draggable key={rowIndex} draggableId={item.id} index={rowIndex}>\r\n                {(provided) => (\r\n                  <tr\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    key={item.id}\r\n                  >\r\n                    {schema.map((col, colIndex) => this.renderColumn(item, col, colIndex, rowIndex))}\r\n                  </tr>\r\n                )}\r\n              </Draggable>\r\n\r\n            ))}\r\n            </tbody>\r\n          )}\r\n        </Droppable>\r\n\r\n      </DragDropContext>\r\n    )\r\n  }\r\n}\r\n\r\nTableBody.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  schema: PropTypes.array.isRequired,\r\n  reorder: PropTypes.func,\r\n  widths: PropTypes.object,\r\n  draggable: PropTypes.bool.isRequired,\r\n}\r\n\r\nTableBody.defaultProps = {\r\n  reorder: () => {},\r\n  widths: {},\r\n}\r\n\r\nexport default TableBody\r\n","import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst MIN_WIDTH = 100\r\n\r\nclass TableHead extends PureComponent {\r\n  columnRefs = {}\r\n\r\n  componentDidMount() {\r\n    this.calcWidths()\r\n    window.addEventListener('mousemove', this.onResize)\r\n    window.addEventListener('mouseup', this.onStopResize)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('mousemove', this.onResize)\r\n    window.removeEventListener('mouseup', this.onStopResize)\r\n  }\r\n\r\n  calcWidths = () => {\r\n    setTimeout(() => {\r\n      const { setColumnWidth } = this.props\r\n      const widthData = Object.keys(this.columnRefs).reduce((result, key) => {\r\n        return {\r\n          ...result,\r\n          [key]: this.columnRefs[key].getBoundingClientRect().width\r\n        }\r\n      }, {})\r\n      setColumnWidth(widthData)\r\n    }, 0)\r\n  }\r\n\r\n  onDragStart = (index) => (e) => {\r\n    this.dragColumnIndex = index\r\n  }\r\n\r\n  onDragEnter = (index) => (e) => {\r\n    const { reorder, schema } = this.props\r\n    const column = schema[index]\r\n    if (index === this.dragColumnIndex) {\r\n      return\r\n    }\r\n    const targetRect = this.columnRefs[column.key].getBoundingClientRect()\r\n    const middle = (targetRect.right - targetRect.left) / 2\r\n    const hoverClientX = e.clientX - targetRect.left\r\n    if (this.dragColumnIndex < index && hoverClientX < middle) {\r\n      return\r\n    }\r\n\r\n    if (this.dragColumnIndex > index && hoverClientX > middle) {\r\n      return\r\n    }\r\n    reorder(this.dragColumnIndex, index)\r\n    this.dragColumnIndex = index\r\n  }\r\n\r\n  getStyle = (key) => {\r\n    const { draggable } = this.props\r\n    const initStyle = {\r\n      position: 'relative',\r\n      cursor: draggable ? 'move' : 'default',\r\n    }\r\n    const { widths } = this.props\r\n    if (!widths[key]) {\r\n      return initStyle\r\n    }\r\n\r\n    return { ...initStyle, width: widths[key] }\r\n  }\r\n\r\n  onResizeStart = (key) => (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    this.isResize = true\r\n    this.key = key\r\n    this.clientX = e.clientX\r\n  }\r\n\r\n  onResize = (e) => {\r\n    if (!this.isResize || !this.key) {\r\n      return\r\n    }\r\n    const { widths, setColumnWidth } = this.props\r\n    setColumnWidth({\r\n      ...widths,\r\n      [this.key]: Math.max(widths[this.key] + (e.clientX - this.clientX), MIN_WIDTH),\r\n    })\r\n    this.clientX = e.clientX\r\n  }\r\n\r\n  onStopResize = (e) => {\r\n    this.isResize = false\r\n    this.key = null\r\n  }\r\n\r\n  render() {\r\n    const { schema, draggable, resizeable } = this.props\r\n    return (\r\n      <thead>\r\n      <tr>\r\n        {schema.map((col, colIndex) => (\r\n          <th\r\n            key={colIndex}\r\n            ref={el => this.columnRefs[col.key] = el}\r\n            onDragStart={this.onDragStart(colIndex)}\r\n            onDragOver={this.onDragEnter(colIndex)}\r\n            draggable={draggable}\r\n            style={this.getStyle(col.key)}\r\n          >\r\n            {col.title}\r\n            {resizeable && (\r\n              <div\r\n                onMouseDown={this.onResizeStart(col.key)}\r\n                style={{\r\n                  height: '100%',\r\n                  display: 'inline-block',\r\n                  width: 8,\r\n                  cursor: 'col-resize',\r\n                  position: 'absolute',\r\n                  top: 0,\r\n                  right: 0,\r\n                }}\r\n              />\r\n            )}\r\n          </th>\r\n        ))}\r\n      </tr>\r\n      </thead>\r\n    )\r\n  }\r\n}\r\n\r\nTableHead.propTypes = {\r\n  schema: PropTypes.array.isRequired,\r\n  reorder: PropTypes.func,\r\n  setColumnWidth: PropTypes.func,\r\n  widths: PropTypes.object,\r\n  draggable: PropTypes.bool.isRequired,\r\n  resizeable: PropTypes.bool,\r\n}\r\n\r\nTableHead.defaultProps = {\r\n  reorder: () => {},\r\n  setColumnWidth: () => {},\r\n  widths: {},\r\n  resizeable: false,\r\n}\r\n\r\nexport default TableHead\r\n","import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TableBody from './TableBody'\r\nimport TableHead from './TableHead'\r\n\r\nconst item = {\r\n  index: 'VN-Index',\r\n  last: 'Sunny Garton',\r\n  change: '(288) 1417941',\r\n  percentChange: 'GMC',\r\n  volume: 'Savana 2500',\r\n  value: 'Yellow',\r\n  buyVolume: '$99799.94',\r\n  sellVolume: '2016-03-23',\r\n  foreignNet: 5,\r\n  putThoughVol: 2,\r\n  putThoughValue: 2,\r\n}\r\n\r\nconst data = [...Array(10)].map((it, index) => ({ id: index + 1, ...item }))\r\n\r\nconst schema = [\r\n  {\r\n    key: 'id',\r\n    title: 'ID',\r\n  },\r\n  {\r\n    key: 'index',\r\n    title: 'INDEX',\r\n    render: text => <><i className=\"icon-graph fs-10\" />{text}</>\r\n  },\r\n  {\r\n    key: 'last',\r\n    title: 'LAST',\r\n    render: (text, item, index) => (\r\n      <div className={index % 2 === 0 ? 'text-s-color-5' : 'text-s-color-3'}>{text}</div>\r\n    ),\r\n  },\r\n  {\r\n    key: 'change',\r\n    title: 'CHANGE',\r\n  },\r\n  {\r\n    key: 'percentChange',\r\n    title: '% CHANGE',\r\n  },\r\n  {\r\n    key: 'volume',\r\n    title: 'VOLUME',\r\n  },\r\n  {\r\n    key: 'value',\r\n    title: 'VALUE',\r\n  },\r\n  {\r\n    key: 'buyVolume',\r\n    title: 'FR. BUY VOL',\r\n  },\r\n  {\r\n    key: 'sellVolume',\r\n    title: 'FR. SELL VOL',\r\n  },\r\n  {\r\n    key: 'foreignNet',\r\n    title: 'FOREIGN NET',\r\n  },\r\n  {\r\n    key: 'putThoughVol',\r\n    title: 'PUT THROUGH VOL',\r\n  },\r\n  {\r\n    key: 'putThoughValue',\r\n    title: 'PUT THROUGH VALUE',\r\n  },\r\n]\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list)\r\n  const [removed] = result.splice(startIndex, 1)\r\n  result.splice(endIndex, 0, removed)\r\n\r\n  return result\r\n}\r\n\r\nclass Table extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    const { schema, data } = this.props\r\n    this.state = {\r\n      schema,\r\n      data,\r\n      widths: {},\r\n      hideColumns: [],\r\n    }\r\n  }\r\n\r\n  reorderColumn = (startIndex, targetIndex) => {\r\n    const { schema } = this.state\r\n    this.setState({\r\n      schema: reorder(schema, startIndex, targetIndex),\r\n    })\r\n  }\r\n\r\n  reorderRow = (startIndex, targetIndex) => {\r\n    const { data } = this.state\r\n    this.setState({\r\n      data: reorder(data, startIndex, targetIndex),\r\n    })\r\n  }\r\n\r\n  setWidth = widths => {\r\n    this.setState({\r\n      widths,\r\n    })\r\n  }\r\n\r\n  hideColumn = (key) => {\r\n    const { hideColumns } = this.state\r\n\r\n    this.setState({\r\n      hideColumns: hideColumns.concat(key)\r\n    })\r\n  }\r\n\r\n  showColumn = (key) => {\r\n    const { hideColumns } = this.state\r\n\r\n    this.setState({\r\n      hideColumns: hideColumns.filter(col => col !== key)\r\n    })\r\n  }\r\n\r\n  onCheckBoxChange = (e) => {\r\n    if (e.target.checked) {\r\n      this.showColumn(e.target.name)\r\n      return\r\n    }\r\n    this.hideColumn(e.target.name)\r\n  }\r\n\r\n  getSchema = () => {\r\n    const { schema, hideColumns } = this.state\r\n\r\n    return schema.filter(col => !hideColumns.includes(col.key))\r\n  }\r\n\r\n  render() {\r\n    const { schema, data, widths, hideColumns } = this.state\r\n    const { columnDraggable, rowDraggable, resizeable } = this.props\r\n    return (\r\n      <div>\r\n        <table className=\"scroll-table border-table\">\r\n          <TableHead\r\n            draggable={columnDraggable}\r\n            setColumnWidth={this.setWidth}\r\n            widths={widths}\r\n            schema={this.getSchema()}\r\n            reorder={this.reorderColumn}\r\n            resizeable={resizeable}\r\n          />\r\n          <TableBody\r\n            widths={widths}\r\n            draggable={rowDraggable}\r\n            reorder={this.reorderRow}\r\n            schema={this.getSchema()}\r\n            data={data}\r\n          />\r\n        </table>\r\n\r\n        <div className=\"d-flex mt-3\">\r\n          {schema.map((col) => (\r\n            <div key={col.key} className=\"custom-control custom-checkbox mr-3\">\r\n              <input\r\n                checked={!hideColumns.includes(col.key)}\r\n                type=\"checkbox\"\r\n                name={col.key}\r\n                className=\"custom-control-input\"\r\n                id={`customCheck1_${col.key}`}\r\n                onChange={this.onCheckBoxChange}\r\n              />\r\n              <label className=\"custom-control-label\" htmlFor={`customCheck1_${col.key}`}>\r\n                {col.title}\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTable.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  schema: PropTypes.array.isRequired,\r\n  columnDraggable: PropTypes.bool,\r\n  rowDraggable: PropTypes.bool,\r\n  resizeable: PropTypes.bool,\r\n}\r\n\r\nTable.defaultProps = {\r\n  data,\r\n  schema,\r\n  columnDraggable: false,\r\n  rowDraggable: false,\r\n  resizeable: false,\r\n}\r\n\r\nexport default Table\r\n","import React, { Component } from 'react';\nimport Table from './components/Table'\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Table\n          resizeable={true}\n          columnDraggable={true}\n          rowDraggable={true}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}